
Working To-Do:

	global debug UI widget/reactive values
	debug console

	skybox
	directional/sun lighting
	lights
	sample shading
	bindless textures
	shadow mapping
	normal mapping

	movement physics
	world interaction
	chunk paging

	config format language
		rewrite metaprogram to use it

Bugs:
	SDL layer resets the cursor to pointer on every mouse move

	allocation profiling is somewhat broken for the world system

Everything not by me:
	#include <stdarg.h>
	#include <stdint.h>
	#include <float.h>
	#include <new>
	#include <cmath>
	#include <typeinfo>
	#include <xmmintrin.h>/<intrin.h>

Large-Scale Improvements | Changes for Future Projects
	rewrite metaprogram for robustness, possibly as a library/outputting a data format
		don't output through pointers? maybe
	don't use ::make pattern so much, use .init for not straight POD types
	less callbacks? good, but also not really, they're quite useful. I wish closures didn't need STL and they didn't heap allocate
	probably don't use the futures pattern for the thread pool, go back to event loop
	asset store can be more meta file + data files for hot/cold loading etc. Not sure if necessary though
	use Vulkan

Overall To-Do List:

	chunk meshing
		current vertex format [order in shader], struct is byte-order reversed on u32 boundary
			0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
			yyyy yyyy yyyy aoao zzzz zzzz xxxx xxxx vvvv vvvv uuuu uuuu aoao tttt tttt tttt
		Tradeoff compactness vs. detail - how do we do LOD and special multifaceted blocks?
			do we want different vertex layouts for LOD????

	other voxel structures - SHOULD EXPLORE
		stb_voxel_render approach
			separate vertex/face data
			vertex : 1 byte x 1 byte y 1 byte z 1 byte lighting (2b AO)
			face : 2 byte texture, 1 byte normal/rotation
		Geometry shader cube gen - more complicated, can be very fast, will experiment
		Geometry shader gen from faces
			why is this any better than the cube?
			would this actually be good though? it would likely be similar to meshing but larger/less "vertices"
			Calculate vertex stuff from uniform face data???
		3D texture ray-marching - should explore, probably doesn't make much sense for versatility
			would represent chunks as octrees?

	new build system with clang
		make metaprogram a real compilation step, get rid of PROF

	data structures
		list (same API as vector, but chunked & no-copy)
		strings
			string builder
			could improve cache locality by doing gb-string style header then data (also can use as c_str automatically)
		improve map storage/AOS
			try separate vectors of keys, values, hashes (no map_element)
		concurrent
			dequeue for work-stealing
			vector
			map

	allocators
		free list (one-size pool re-using arenas)
		alignment is not respected in default heap_alloc 
		stack allocations (_malloca? can't easily platform-abstract this...) where possible

	async
		pause/resume job? ~closures~ how do we do this when job != thread?

	meta
		range tags on struct members for GUI editing (sliders)
		config language: serialization/deserialization
			deserialize to type vs deserialize to generic JSON like object [tagged/no tagged]
			data versioning
		printf
			use string builder?
			human readable {} printing (with newlines)
			increase speed; recursive calls are quite slow (...might not be able to get rid of the recursion, though)
		support loading/writing type table for release (i.e. don't build on startup)

	debug
		re-enable arena/pool messages?
		stats/options 
			apply meta-types
		profiler
			graphs
			sync profiling
			more display modes (sort recursively, etc.)
		Do we want to use CaptureStackBackTrace instead of keeping the call stack ourself? Maybe...

	log
		colorful console output
		keep & output statistics

	UI
		fix cursor change flicker
		fonts
			change asset system to cache TTF files
		Debug Console / log stuff
			swap between verbosity levels
			tooltip call stack / file:line
			commands (Lua API?)
		subl_remote_open for profiler & logging

	asset
		define mods as asset packs
		auto-reload asset stores
			call asset.exe to re/build (do path stuff, platform_exec_cmd)
		more types of assets: 
			Mod Definitions
			Lua scripts
			DLLs
			Config Files
			Shaders
			Texture Atlases/Arrays
			3D Models & Animations
			Sounds

	modding system
		API considerations
		API exposed to both C-DLL & Lua
			embedding LuaJIT 
			debugging LuaJIT
			dynamic reload

	platform
		linux build system with SDL layer
		async File IO
		Networking - cURL? WinSock? TCP
		Virtually allocate large block of address space on startup and use jemalloc(eg) for general allocations
		wgl extension testing/loading
		file change watcher/callback system - maybe? see JBlow catalogs
		controller support?
		Keep window updating during resize/move

	OpenGl
		Shaders
			preprocessor / shader assets
			tessellation / geometry shaders
		post-processing effects
		HDR
		AZDO (bindless?)
			glNamed operations
			glMapBuffer?
			command lists -> translate from mine
		3D models & procedural animation
			skeletal animation

	chunks
		LOD
		storage representation (compression?)
		world storage (3D chunks?)
		paging to disk - serialization, etc.

	gameplay
		this will be filled out eventually

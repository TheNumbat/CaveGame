
For overall : see #high_level_systems

immediate to do:

	UI
		think about how we want to cache windows/widgets - it's basically retained mode right now
		window layering/sorting/input occlusion
		widget+title clipping based on window size (just use clip rect?)
		window rendering based on flags
		text wrapping based on window size, etc.
		lots of different widgets (see dear imgui)
		start profiler

	asset
		asset texture atlases
		call asset.exe to re/build (do path stuff, platform_exec_cmd)
		auto-reload asset stores
		asset manager (general allocator?)

	fonts
		color/format specifications in string
		extra kerning pairs

	better allocator names - don't just copy

	platform
		wgl extension testing/loading

	OpenGl
		improve shader spec API
		2D
			texture atlas - fonts (texture array?)
		3D
			texture atlas/array representation/store
			chunk meshing, texturing
			deferred mesh re/building
			models & animation
		rename ogl stuff to "renderer" to facilitate different backends

	metaprogramming - struct introspection?
		replace vsnprintf

	Make concurrent vector/array/stack/hash map 
		use for allocator stacks, logging contexts, job/logging queue
		basically wherever we use a mutex right now.
	
	Profiling/debugging/visualization


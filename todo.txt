
Working To-Do:

[1]	World & Rendering
		
		add east/west sunlight calculation & day curve use

		fix place/break block
		fix waiting for new neighbor meshes

		deferred rendering
		gamma correction
		
		dynamic lights
		dynamic shadows
		
		sunlight shadows
		sun/moon objects 
		
		chunk culling / visibility query
		normal mapping
		HDR / bloom / god rays / better fog

	data serialization/deserialization
	user settings interface

	multiple texture arrays for > 2048 textures
	consolidate shaders
	better graphics feature checks

	movement physics
	chunk paging and persistence
	world generation framework

Bugs:
	SDL layer resets the cursor to pointer on every mouse move

Large-Scale Improvements | Changes for Future Projects
	rewrite metaprogram for robustness, possibly as a library/outputting a data format
		don't output through pointers? maybe
	less callbacks? good, but also not really, they're quite useful. I wish closures didn't need STL and they didn't heap allocate
	probably don't use the futures pattern for the thread pool, go back to event loop
	asset store can be more meta file + data files for hot/cold loading etc. Not sure if necessary though
	use Vulkan

Overall To-Do List:

	new build system with clang
		make metaprogram a real compilation step, get rid of PROF

	data structures
		list (same API as vector, but chunked & no-copy) 
		strings
			string builder
			could improve cache locality by doing gb-string style header then data (also can use as c_str automatically)
		improve map storage/AOS
			try separate vectors of keys, values, hashes (no map_element)
		concurrent
			dequeue for work-stealing
			vector, map

	allocators
		free list (one-size pool re-using arenas)
		alignment is not respected in default heap_alloc 
		stack allocations (_malloca? can't easily platform-abstract this...) where possible

	meta
		range tags on struct members for GUI editing (sliders)
		config language: serialization/deserialization
			deserialize to type vs deserialize to generic JSON like object [tagged/no tagged]
			data versioning
		printf
			use string builder?
			human readable {} printing (with newlines)
			increase speed; recursive calls are quite slow (...might not be able to get rid of the recursion, though)
		support loading/writing type table for release (i.e. don't build on startup)

	debug
		re-enable arena/pool messages?
		profiler
			graphs
			sync profiling
			more display modes (sort total calls, etc.)
		Do we want to use CaptureStackBackTrace instead of keeping the call stack ourself? Maybe...

	log
		keep & output statistics

	asset
		define mods as asset packs
		command to rebuild asset stores
		more types of assets: 
			Mod Definitions
			Lua scripts
			DLLs
			Config Files
			Shaders
			Texture Atlases/Arrays
			3D Models & Animations
			Sounds

	modding system
		API considerations
		API exposed to both C-DLL & Lua
			embedding LuaJIT 
			debugging LuaJIT
			dynamic reload

	platform
		linux build system with SDL layer
		async File IO
		Networking - cURL? WinSock? TCP
		Virtually allocate large block of address space on startup and use jemalloc(eg) for general allocations
		file change watcher/callback system - maybe? see JBlow catalogs
		controller support
		Keep window updating during resize/move

	OpenGl
		Shaders
			preprocessor / shader assets
		post-processing effects
		HDR
		AZDO
			glNamed operations
			glMapBuffer?
			NV command lists -> translate from mine
			bindless textures / buffers
		3D models & procedural animation
			skeletal animation

	chunks
		LOD
		paging to disk - serialization, etc.

	gameplay
		this will be filled out eventually

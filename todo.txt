
For overall : see #high_level_systems

features so far:
	data structures: array, hash map (robin hood open addressing), queue, stack, vector, thread pool, string
	allocation context system + arena allocators, joint allocation, etc.
	asset processing & loading: images, fonts, font atlasing
	event based input system
	metaprogramming: context, call stack, type reflection info, any-type printf
	flexible IMGUI system 
	threaded extensible logging system
	vector/matrix math
	opengl rendering system
	windows platform layer

immediate to do:

	uncategorized
		SIMD & intrinsic math (vectorized functions, vector/mat math, noise & randomness)
		stack allocations (_malloca) where possible

	meta
		Support
			enum
			static array
			template deduction from variables/parameters	
		printf
			enum
			array
			function
			special prints for data structures
		integration with UI
		profiler

	log
		buffer file IO
		can we remove allocation on message send?
		pool allocator/free list?

	UI
		stop sending mesh every frame (see OpenGL)
		we only need alpha data from font textures - compress
		widgets
			clipping/wrapping/auto-layout
			dividers
			multiple fonts
			image widgets - do we need this?
			texture arrays? would be useful for multiple fonts as well
			text wrapping
			lots of other input types (float, text, check-box, key, etc.)
		general window scroll
			click/drag/hold scroll bar
			sticky scroll (like twitch chat)
		logger UI window
			swap between levels
			tooltip call stack / file:line
			console + commands
		profiler
			lots to do here

	asset
		asset texture atlases
		call asset.exe to re/build (do path stuff, platform_exec_cmd)
		auto-reload asset stores
		asset manager (general allocator?)
		more types of assets: modding system

	modding system
		Lua
			embedding Lua 
			debugging Lua
			dynamic reload
		think about mod API structure

	fonts
		color/format specifications in string
		extra kerning pairs

	platform
		fix cursor
		wgl extension testing/loading
		file change watcher/callback system - maybe not?
		linux platform layer

	OpenGl
		remove sending on every command
		start AZDO style (bindless?)
		improve shader spec API
		3D
			texture arrays?
			models & animation
		rename ogl stuff to "renderer" to facilitate different backends

	chunks
		chunk meshing, texturing
		deferred mesh re/building
		LOD
		storage representation (compression?)
		paging
		world storage (3D chunks?)

	Make concurrent data structures
	
	threading
		threadpool await (store job IDs, block until finished)
		farm out initialization code
		integration with modding system

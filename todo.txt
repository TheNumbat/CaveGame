
For overall : see #high_level_systems

immediate to do:

	meta
		clean up metaprogram code
		introspection
			array
			enum
			function
			templated members
		printf
			float
			enum
			array
			function
			clean up code - not sure if possible, thanks templates
		integration with UI
		profiler

	log
		buffer file IO
		can we remove allocation on message send?
		pool allocator/free list?

	UI
		joint allocate cached log messages
		stop sending mesh every frame (see OpenGL)
		widget clipping/wrapping
		text wrapping
		general window scroll
			click/drag/hold scroll bar
			sticky scroll (like twitch chat)
		lots of widgets types
		logger UI window
			swap between levels
			tooltip call stack / file:line
		start profiler
			lots to do here...

	asset
		asset texture atlases
		call asset.exe to re/build (do path stuff, platform_exec_cmd)
		auto-reload asset stores
		asset manager (general allocator?)

	fonts
		color/format specifications in string
		extra kerning pairs

	allocators
		better names, force specific names for DS allocators

	platform
		fix cursor
		wgl extension testing/loading
		file change watcher/callback system
		linux platform layer

	OpenGl
		remove sending on every command
		start AZDO style (bindless?)
		improve shader spec API
		3D
			texture arrays?
			models & animation
		rename ogl stuff to "renderer" to facilitate different backends

	chunks
		chunk meshing, texturing
		deferred mesh re/building
		LOD
		storage representation (compression?)
		paging
		world storage (3D chunks?)

	Make concurrent vector/array/stack/hash map 
		use for allocator stacks, logging contexts, job/logging queue
		basically wherever we use a mutex right now.
	


Working To-Do:

	- Want to finish all rendering features + explore the performance/structure enhancements by school
	- when this is done, write really really long post about everything in the graphics pipe

	Future: iterate on world and QoL features, and begin actual game-play
		Really want to learn networking/support multi-player
		Maybe modding, but first a from-scratch playable multi-player core 
		Demo survival a-la Minecraft beta (but with really nice looking graphics) would be great

	Asset System:
		shaders asset & include system
			definitions + code
		but how do we continue hot reloading? add source paths and regenerate asset pack?
		probably just move hot reloading out to the asset level
		!! texture editor 

	Rendering:
		[features]
		dynamic lights
			change specular maps to have intensity + power
			use normal from normal map texture
			randomized textures
			need some kind of spatial reference for lights, to add/remove
		dynamic shadows
			directional light shadows
			spotlight shadows
			point light shadows

		better fog (e.g. fog undergound should be dark -- apply lighting to fog)
			http://www.sea-of-memes.com/LetsCode37/LetsCode37.html
		bloom
			https://learnopengl.com/Advanced-Lighting/Bloom
		HDR / auto exposure?
			God Rays
			make sun way brighter than torches and have auto exposure drown them out
			https://learnopengl.com/Advanced-Lighting/HDR
		optional FXAA/SMAA effects

		!! gonna need some chunk culling
		!! instance cones for long spot lights instead of wasting the entire sphere		
		transparent blocks
		animated blocks (e.g. waving foliage)
		water shaders

		[performance/structure]
		look at sample rate shading again; marking pixels as complex
		reduce state changes
			diff state instead of setting everything
			set up sorting system for commands based on state
			uniform buffers
			multidrawindirect for chunks; begin_chunks finish_chunks generate one command together
		!! chunk culling / visibility / draw optimizations
			try cpu frustum + occlusion queries
			defer the queries a few frames?
			removing chunk gpu data when it is not being drawn 
			also cpu data, but that comes later
		bindless OGL stuff
		move OpenGL to another thread - should be pretty easy through gfx
			lockless task buffers? 
			can we thread generating the chunk command list?
		look into Forward+ rendering or Tile Deferred / Tiled Forward 
			this is even better for supporting tons of small-radius lights
			not that much better than deferred for large lights, though, so this depends on the dynamic radius of torches 

	World:
		FIX: torchlight AND sunlight removal
			also, calculating per vertex gives us diagonal bleed; think about this
		add east/west sunlight calculation & day curve use

		sun/moon objects 
		spinning sky/stars

		fix place/break block
		fix waiting for new neighbor meshes
		
		chunk paging and persistence
		world generation framework
			look into procgen 
			look into WaveFunctionCollapse structure generation

	data serialization/deserialization
	menu / user settings
	movement physics

[Rendering Blog Post]
	updated world lighting, torch + sun + dynamics
	pipeline setup, gamma, bloom, hdr, exposure
		trying forward, deferred, then settling on sort-of-clustered forward?
	shadowing, fog
	materials/specular textures/normal mapping/etc.
	optimizations, chunk culling, openGL bindless/UBO/etc.

Relatively unimportant bugs:
	SDL layer resets the cursor to pointer on every mouse move
	There is still some inconsistency in code reloading
		IMGUI window data persisting between code reloads occasionally doesn't work?
		threads.cpp:233 log allocations don't get cataloged, but the frees do...maybe something to do with registering a new thread?

Large-Scale Improvements | Changes for Future Projects
	less callbacks? good, but also not really, they're quite useful. I wish closures didn't need STL and they didn't heap allocate
	probably don't use the futures pattern for the thread pool, go back to event loop
	asset store can be more meta file + data files for hot/cold loading etc. Not sure if necessary though
	use Vulkan
	probably don't use hot DLL reloading for the whole project; isolate this to the game components at least and ensure that hot-reloaded things are pure, and don't have changing data definitions.

Overall To-Do List:

	new build system with clang
		make metaprogram a real compilation step, get rid of PROF

	data structures
		list (same API as vector, but chunked & no-copy) 
		strings
			string builder
			could improve cache locality by doing gb-string style header then data (also can use as c_str automatically)
		improve map storage/AOS
			try separate vectors of keys, values, hashes (no map_element)
		concurrent
			dequeue for work-stealing
			vector, map

	allocators
		free list (one-size pool re-using arenas)
		alignment is not respected in default heap_alloc 
		stack allocations (_malloca? can't easily platform-abstract this...) where possible

	meta
		range tags on struct members for GUI editing (sliders)
		config language: serialization/deserialization
			deserialize to type vs deserialize to generic JSON like object [tagged/no tagged]
			data versioning
		printf
			use string builder?
			human readable {} printing (with newlines)
			increase speed; recursive calls are quite slow (...might not be able to get rid of the recursion, though)
		support loading/writing type table for release (i.e. don't build on startup)

	debug
		re-enable arena/pool messages?
		profiler
			graphs
			sync profiling
			more display modes (sort total calls, etc.)
		Do we want to use CaptureStackBackTrace instead of keeping the call stack ourself? Maybe...

	log
		keep & output statistics

	asset
		define mods as asset packs
		command to rebuild asset stores
		more types of assets: 
			Mod Definitions
			Lua scripts
			DLLs
			Config Files
			Shaders
			Texture Atlases/Arrays
			3D Models & Animations
			Sounds

	modding system
		API considerations
		API exposed to both C-DLL & Lua
			embedding LuaJIT 
			debugging LuaJIT
			dynamic reload

	platform
		linux build system with SDL layer
		async File IO
		Networking - cURL? WinSock? TCP
		Virtually allocate large block of address space on startup and use jemalloc(eg) for general allocations
		file change watcher/callback system - maybe? see JBlow catalogs
		controller support
		Keep window updating during resize/move

	OpenGl
		Shaders
			preprocessor / shader assets
		AZDO
			glMapBuffer?
			NV command lists -> translate from mine
			bindless textures / buffers
		3D models & procedural animation
			skeletal animation

	chunks
		LOD
		paging to disk - serialization, etc.

	gameplay
		this will be filled out eventually

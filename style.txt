
Comments
	Comment intent
	Comment any useful usage information
	Explain optimizations

Types
	Use basic types from common.h

Headers
	static globals, structure definitions, function prototypes
	#pragma once
	single translation unit - #include the cpp implementation at the bottom

Platforms
	keep all platform specific code in its own platform layer
	platform layer headers need to be interchangeable

Functions
	Return should usually be a status (usually an error indicator/structure if there is the possibility of error)
	Use out (pointer) parameters for data manipulation (unless there is really really no need for a status return)

Names (generally)
	Functions
		snake_case_verb
	Variables
		snake_case_noun
	Macros
		CAPS_SNAKE_VERB
	Constants
		CAPS_SNAKE_NOUN

Structures
	Include default values in definition

C++ features to not use
	Classes
	STL (and features that force the STL)
	References
	Exceptions
	Template metaprogramming
	variadic parameters

C++ features to probably use
	constexpr
	operator overloading
	templates (sparsely)
	few-level inheritance (probably just single and not multiple)
		this could be replaced with emulating tagged unions, depending on our data setup
	auto
	namespaces / using
	
C++ features to definitely use
	const
	typedef
	default parameters
	struct default initialization
	struct literals



Comments
	Comment intent
	Comment useful usage information
	Explain optimizations

Types
	Use basic types from basic_types.h

Headers
	static globals, structure definitions, function prototypes
	#pragma once
	single translation unit - #include your .h and .cpp in everything.h

Platforms
	keep all platform specific code in its own platform layer
	platform layer headers need to be interchangeable
		all platform layers must implement platform_api.h

Functions
	platform functions/functions that may error should return a status

Names (generally)
	Functions
		snake_case_verb
	Variables
		snake_case_noun
	Macros
		CAPS_SNAKE_VERB
	Constants
		CAPS_SNAKE_NOUN
	Types
		snake_case_noun
Yes it seems a bit dumb to use more or less the same scheme for everything, but I enjoy it

Structures
	Include default values in definition

C/C++ features to not use
	Classes
	STL (and features that force the STL)
	References
	Exceptions
	Template metaprogramming
	variadic parameters
	const
	auto
	namespaces / using

C/C++ features to probably use
	constexpr
	few-level inheritance (probably just single and not multiple)
		this could be replaced with emulating tagged unions, depending on our data setup

C/C++ features to definitely use
	operator overloading (sparsely)
		mostly for algorithm genericness/equality
		should I add all these for math.h?
	templates (sparsely)
		this causes problems with reloading the game DLL, though :/
	typedef
	default parameters
	struct default initialization
	struct literals
		this seems very inconsistent across compilers - need to research
